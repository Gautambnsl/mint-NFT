// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;


import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract BitsureNft is ERC721URIStorage {
    
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    constructor() ERC721("Bitsure NFR", "Bitsure") {}

    function safeMint(address player, string memory tokenURI)
        public
        returns (uint256)
    {
        
        uint256 newItemId = _tokenIds.current();
        _mint(player, newItemId);
        _setTokenURI(newItemId, tokenURI);

        _tokenIds.increment();
        return newItemId;
    }
}


contract Bitsure{


    mapping(address=>uint) dMembers;
    address nft;
    mapping(uint=>user) allIds;
    uint countRegUser;
    uint public countDMembers;
    uint lastId = 1000;

    constructor(address temp){
        nft = temp;
    }

    function regesterDaoMembers() public payable {
        require(dMembers[msg.sender]==0, "you are already a Dao Member");
        require(msg.value == 1e17, "unsufficient value");
        dMembers[msg.sender] = 1;
        countDMembers++;

    }



    function insurence(string memory _name,uint _age, string memory _address,string memory link, string memory uri) payable public {
        require(msg.value == 1e17, "you have not send enough premium fee");
        lastId++;
        user memory temp;
        temp.id = lastId;
        temp.name = _name;
        temp.walletAddress = msg.sender;
        temp.age = _age;
        temp.userAddress = _address;
        temp.regDate = block.timestamp;
        temp.expiryDate = block.timestamp + 356 days;
        temp.link = link;

        countRegUser++;
        allIds[lastId] = temp;

        BitsureNft Contract = BitsureNft(nft);

        Contract.safeMint(msg.sender,uri);

    }


    function renue(uint id) payable public{



        require(msg.value== 1e17, "not enough money");

        allIds[id].regDate  = allIds[id].regDate + 356 days;


    }

    struct user{
        uint id;
        string name;
        address walletAddress;
        uint age;
        string userAddress;
        uint regDate;
        uint expiryDate;
        string link;
    }







}
